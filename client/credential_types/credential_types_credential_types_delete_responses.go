// Code generated by go-swagger; DO NOT EDIT.

package credential_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// CredentialTypesCredentialTypesDeleteReader is a Reader for the CredentialTypesCredentialTypesDelete structure.
type CredentialTypesCredentialTypesDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CredentialTypesCredentialTypesDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewCredentialTypesCredentialTypesDeleteNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCredentialTypesCredentialTypesDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCredentialTypesCredentialTypesDeleteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCredentialTypesCredentialTypesDeleteNoContent creates a CredentialTypesCredentialTypesDeleteNoContent with default headers values
func NewCredentialTypesCredentialTypesDeleteNoContent() *CredentialTypesCredentialTypesDeleteNoContent {
	return &CredentialTypesCredentialTypesDeleteNoContent{}
}

/*
CredentialTypesCredentialTypesDeleteNoContent describes a response with status code 204, with default header values.

CredentialTypesCredentialTypesDeleteNoContent credential types credential types delete no content
*/
type CredentialTypesCredentialTypesDeleteNoContent struct {
}

// IsSuccess returns true when this credential types credential types delete no content response has a 2xx status code
func (o *CredentialTypesCredentialTypesDeleteNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this credential types credential types delete no content response has a 3xx status code
func (o *CredentialTypesCredentialTypesDeleteNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this credential types credential types delete no content response has a 4xx status code
func (o *CredentialTypesCredentialTypesDeleteNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this credential types credential types delete no content response has a 5xx status code
func (o *CredentialTypesCredentialTypesDeleteNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this credential types credential types delete no content response a status code equal to that given
func (o *CredentialTypesCredentialTypesDeleteNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *CredentialTypesCredentialTypesDeleteNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/credential_types/{id}/][%d] credentialTypesCredentialTypesDeleteNoContent ", 204)
}

func (o *CredentialTypesCredentialTypesDeleteNoContent) String() string {
	return fmt.Sprintf("[DELETE /api/v2/credential_types/{id}/][%d] credentialTypesCredentialTypesDeleteNoContent ", 204)
}

func (o *CredentialTypesCredentialTypesDeleteNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCredentialTypesCredentialTypesDeleteUnauthorized creates a CredentialTypesCredentialTypesDeleteUnauthorized with default headers values
func NewCredentialTypesCredentialTypesDeleteUnauthorized() *CredentialTypesCredentialTypesDeleteUnauthorized {
	return &CredentialTypesCredentialTypesDeleteUnauthorized{}
}

/*
CredentialTypesCredentialTypesDeleteUnauthorized describes a response with status code 401, with default header values.

CredentialTypesCredentialTypesDeleteUnauthorized credential types credential types delete unauthorized
*/
type CredentialTypesCredentialTypesDeleteUnauthorized struct {
}

// IsSuccess returns true when this credential types credential types delete unauthorized response has a 2xx status code
func (o *CredentialTypesCredentialTypesDeleteUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this credential types credential types delete unauthorized response has a 3xx status code
func (o *CredentialTypesCredentialTypesDeleteUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this credential types credential types delete unauthorized response has a 4xx status code
func (o *CredentialTypesCredentialTypesDeleteUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this credential types credential types delete unauthorized response has a 5xx status code
func (o *CredentialTypesCredentialTypesDeleteUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this credential types credential types delete unauthorized response a status code equal to that given
func (o *CredentialTypesCredentialTypesDeleteUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CredentialTypesCredentialTypesDeleteUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/credential_types/{id}/][%d] credentialTypesCredentialTypesDeleteUnauthorized ", 401)
}

func (o *CredentialTypesCredentialTypesDeleteUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /api/v2/credential_types/{id}/][%d] credentialTypesCredentialTypesDeleteUnauthorized ", 401)
}

func (o *CredentialTypesCredentialTypesDeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCredentialTypesCredentialTypesDeleteForbidden creates a CredentialTypesCredentialTypesDeleteForbidden with default headers values
func NewCredentialTypesCredentialTypesDeleteForbidden() *CredentialTypesCredentialTypesDeleteForbidden {
	return &CredentialTypesCredentialTypesDeleteForbidden{}
}

/*
CredentialTypesCredentialTypesDeleteForbidden describes a response with status code 403, with default header values.

forbidden
*/
type CredentialTypesCredentialTypesDeleteForbidden struct {
}

// IsSuccess returns true when this credential types credential types delete forbidden response has a 2xx status code
func (o *CredentialTypesCredentialTypesDeleteForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this credential types credential types delete forbidden response has a 3xx status code
func (o *CredentialTypesCredentialTypesDeleteForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this credential types credential types delete forbidden response has a 4xx status code
func (o *CredentialTypesCredentialTypesDeleteForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this credential types credential types delete forbidden response has a 5xx status code
func (o *CredentialTypesCredentialTypesDeleteForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this credential types credential types delete forbidden response a status code equal to that given
func (o *CredentialTypesCredentialTypesDeleteForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CredentialTypesCredentialTypesDeleteForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/credential_types/{id}/][%d] credentialTypesCredentialTypesDeleteForbidden ", 403)
}

func (o *CredentialTypesCredentialTypesDeleteForbidden) String() string {
	return fmt.Sprintf("[DELETE /api/v2/credential_types/{id}/][%d] credentialTypesCredentialTypesDeleteForbidden ", 403)
}

func (o *CredentialTypesCredentialTypesDeleteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
