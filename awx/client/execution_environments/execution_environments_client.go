// Code generated by go-swagger; DO NOT EDIT.

package execution_environments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new execution environments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for execution environments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ExecutionEnvironmentsExecutionEnvironmentsActivityStreamList(params *ExecutionEnvironmentsExecutionEnvironmentsActivityStreamListParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsActivityStreamListOK, error)

	ExecutionEnvironmentsExecutionEnvironmentsCopyCreate(params *ExecutionEnvironmentsExecutionEnvironmentsCopyCreateParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsCopyCreateCreated, error)

	ExecutionEnvironmentsExecutionEnvironmentsCopyList(params *ExecutionEnvironmentsExecutionEnvironmentsCopyListParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsCopyListOK, error)

	ExecutionEnvironmentsExecutionEnvironmentsCreate(params *ExecutionEnvironmentsExecutionEnvironmentsCreateParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsCreateCreated, error)

	ExecutionEnvironmentsExecutionEnvironmentsDelete(params *ExecutionEnvironmentsExecutionEnvironmentsDeleteParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsDeleteNoContent, error)

	ExecutionEnvironmentsExecutionEnvironmentsList(params *ExecutionEnvironmentsExecutionEnvironmentsListParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsListOK, error)

	ExecutionEnvironmentsExecutionEnvironmentsPartialUpdate(params *ExecutionEnvironmentsExecutionEnvironmentsPartialUpdateParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsPartialUpdateOK, error)

	ExecutionEnvironmentsExecutionEnvironmentsRead(params *ExecutionEnvironmentsExecutionEnvironmentsReadParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsReadOK, error)

	ExecutionEnvironmentsExecutionEnvironmentsUnifiedJobTemplatesList(params *ExecutionEnvironmentsExecutionEnvironmentsUnifiedJobTemplatesListParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsUnifiedJobTemplatesListOK, error)

	ExecutionEnvironmentsExecutionEnvironmentsUpdate(params *ExecutionEnvironmentsExecutionEnvironmentsUpdateParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	ExecutionEnvironmentsExecutionEnvironmentsActivityStreamList lists activity streams for an execution environment

Make a GET request to this resource to retrieve a list of
activity streams associated with the selected
execution environment.

The resulting data structure contains:

	{
	    "count": 99,
	    "next": null,
	    "previous": null,
	    "results": [
	        ...
	    ]
	}

The `count` field indicates the total number of activity streams
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more activity stream records.

## Results

Each activity stream data structure includes the following fields:

* `id`: Database ID for this activity stream. (integer)
* `type`: Data type for this activity stream. (choice)
* `url`: URL for this activity stream. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `timestamp`:  (datetime)
* `operation`: The action taken with respect to the given object(s). (choice)
  - `create`: Entity Created
  - `update`: Entity Updated
  - `delete`: Entity Deleted
  - `associate`: Entity Associated with another Entity
  - `disassociate`: Entity was Disassociated with another Entity

* `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json)
* `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string)
* `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string)
* `object_association`: When present, shows the field name of the role or relationship that changed. (field)
* `action_node`: The cluster node the activity took place on. (string)
* `object_type`: When present, shows the model on which the role or relationship was defined. (field)

## Sorting

To specify that activity streams are returned in a particular
order, use the `order_by` query string parameter on the GET request.

	?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

	?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

	?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

	?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

	?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

	?related__search=findme
*/
func (a *Client) ExecutionEnvironmentsExecutionEnvironmentsActivityStreamList(params *ExecutionEnvironmentsExecutionEnvironmentsActivityStreamListParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsActivityStreamListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutionEnvironmentsExecutionEnvironmentsActivityStreamListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Execution Environments_execution_environments_activity_stream_list",
		Method:             "GET",
		PathPattern:        "/api/v2/execution_environments/{id}/activity_stream/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecutionEnvironmentsExecutionEnvironmentsActivityStreamListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecutionEnvironmentsExecutionEnvironmentsActivityStreamListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Execution Environments_execution_environments_activity_stream_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecutionEnvironmentsExecutionEnvironmentsCopyCreate execution environments execution environments copy create API
*/
func (a *Client) ExecutionEnvironmentsExecutionEnvironmentsCopyCreate(params *ExecutionEnvironmentsExecutionEnvironmentsCopyCreateParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsCopyCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutionEnvironmentsExecutionEnvironmentsCopyCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Execution Environments_execution_environments_copy_create",
		Method:             "POST",
		PathPattern:        "/api/v2/execution_environments/{id}/copy/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecutionEnvironmentsExecutionEnvironmentsCopyCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecutionEnvironmentsExecutionEnvironmentsCopyCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Execution Environments_execution_environments_copy_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecutionEnvironmentsExecutionEnvironmentsCopyList execution environments execution environments copy list API
*/
func (a *Client) ExecutionEnvironmentsExecutionEnvironmentsCopyList(params *ExecutionEnvironmentsExecutionEnvironmentsCopyListParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsCopyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutionEnvironmentsExecutionEnvironmentsCopyListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Execution Environments_execution_environments_copy_list",
		Method:             "GET",
		PathPattern:        "/api/v2/execution_environments/{id}/copy/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecutionEnvironmentsExecutionEnvironmentsCopyListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecutionEnvironmentsExecutionEnvironmentsCopyListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Execution Environments_execution_environments_copy_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ExecutionEnvironmentsExecutionEnvironmentsCreate creates an execution environment

Make a POST request to this resource with the following execution environment
fields to create a new execution environment:

* `name`: Name of this execution environment. (string, required)
* `description`: Optional description of this execution environment. (string, default=`""`)
* `organization`: The organization used to determine access to this execution environment. (id, default=“)
* `image`: The full image location, including the container registry, image name, and version tag. (string, required)

* `credential`:  (id, default=“)
* `pull`: Pull image before running? (choice)
  - `""`: --------- (default)
  - `always`: Always pull container before running.
  - `missing`: Only pull the image if not present before running.
  - `never`: Never pull container before running.
*/
func (a *Client) ExecutionEnvironmentsExecutionEnvironmentsCreate(params *ExecutionEnvironmentsExecutionEnvironmentsCreateParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutionEnvironmentsExecutionEnvironmentsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Execution Environments_execution_environments_create",
		Method:             "POST",
		PathPattern:        "/api/v2/execution_environments/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecutionEnvironmentsExecutionEnvironmentsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecutionEnvironmentsExecutionEnvironmentsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Execution Environments_execution_environments_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ExecutionEnvironmentsExecutionEnvironmentsDelete deletes an execution environment

Make a DELETE request to this resource to delete this execution environment.
*/
func (a *Client) ExecutionEnvironmentsExecutionEnvironmentsDelete(params *ExecutionEnvironmentsExecutionEnvironmentsDeleteParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutionEnvironmentsExecutionEnvironmentsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Execution Environments_execution_environments_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v2/execution_environments/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecutionEnvironmentsExecutionEnvironmentsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecutionEnvironmentsExecutionEnvironmentsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Execution Environments_execution_environments_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ExecutionEnvironmentsExecutionEnvironmentsList lists execution environments

Make a GET request to this resource to retrieve the list of
execution environments.

The resulting data structure contains:

	{
	    "count": 99,
	    "next": null,
	    "previous": null,
	    "results": [
	        ...
	    ]
	}

The `count` field indicates the total number of execution environments
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more execution environment records.

## Results

Each execution environment data structure includes the following fields:

* `id`: Database ID for this execution environment. (integer)
* `type`: Data type for this execution environment. (choice)
* `url`: URL for this execution environment. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this execution environment was created. (datetime)
* `modified`: Timestamp when this execution environment was last modified. (datetime)
* `name`: Name of this execution environment. (string)
* `description`: Optional description of this execution environment. (string)
* `organization`: The organization used to determine access to this execution environment. (id)
* `image`: The full image location, including the container registry, image name, and version tag. (string)
* `managed`:  (boolean)
* `credential`:  (id)
* `pull`: Pull image before running? (choice)
  - `""`: ---------
  - `always`: Always pull container before running.
  - `missing`: Only pull the image if not present before running.
  - `never`: Never pull container before running.

## Sorting

To specify that execution environments are returned in a particular
order, use the `order_by` query string parameter on the GET request.

	?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

	?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

	?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

	?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

	?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

	?related__search=findme
*/
func (a *Client) ExecutionEnvironmentsExecutionEnvironmentsList(params *ExecutionEnvironmentsExecutionEnvironmentsListParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutionEnvironmentsExecutionEnvironmentsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Execution Environments_execution_environments_list",
		Method:             "GET",
		PathPattern:        "/api/v2/execution_environments/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecutionEnvironmentsExecutionEnvironmentsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecutionEnvironmentsExecutionEnvironmentsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Execution Environments_execution_environments_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ExecutionEnvironmentsExecutionEnvironmentsPartialUpdate updates an execution environment

Make a PUT or PATCH request to this resource to update this
execution environment.  The following fields may be modified:

* `name`: Name of this execution environment. (string, required)
* `description`: Optional description of this execution environment. (string, default=`""`)
* `organization`: The organization used to determine access to this execution environment. (id, default=“)
* `image`: The full image location, including the container registry, image name, and version tag. (string, required)

* `credential`:  (id, default=“)
* `pull`: Pull image before running? (choice)
  - `""`: --------- (default)
  - `always`: Always pull container before running.
  - `missing`: Only pull the image if not present before running.
  - `never`: Never pull container before running.

For a PATCH request, include only the fields that are being modified.
*/
func (a *Client) ExecutionEnvironmentsExecutionEnvironmentsPartialUpdate(params *ExecutionEnvironmentsExecutionEnvironmentsPartialUpdateParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutionEnvironmentsExecutionEnvironmentsPartialUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Execution Environments_execution_environments_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v2/execution_environments/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecutionEnvironmentsExecutionEnvironmentsPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecutionEnvironmentsExecutionEnvironmentsPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Execution Environments_execution_environments_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ExecutionEnvironmentsExecutionEnvironmentsRead retrieves an execution environment

Make GET request to this resource to retrieve a single execution environment
record containing the following fields:

* `id`: Database ID for this execution environment. (integer)
* `type`: Data type for this execution environment. (choice)
* `url`: URL for this execution environment. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this execution environment was created. (datetime)
* `modified`: Timestamp when this execution environment was last modified. (datetime)
* `name`: Name of this execution environment. (string)
* `description`: Optional description of this execution environment. (string)
* `organization`: The organization used to determine access to this execution environment. (id)
* `image`: The full image location, including the container registry, image name, and version tag. (string)
* `managed`:  (boolean)
* `credential`:  (id)
* `pull`: Pull image before running? (choice)
  - `""`: ---------
  - `always`: Always pull container before running.
  - `missing`: Only pull the image if not present before running.
  - `never`: Never pull container before running.
*/
func (a *Client) ExecutionEnvironmentsExecutionEnvironmentsRead(params *ExecutionEnvironmentsExecutionEnvironmentsReadParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutionEnvironmentsExecutionEnvironmentsReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Execution Environments_execution_environments_read",
		Method:             "GET",
		PathPattern:        "/api/v2/execution_environments/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecutionEnvironmentsExecutionEnvironmentsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecutionEnvironmentsExecutionEnvironmentsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Execution Environments_execution_environments_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ExecutionEnvironmentsExecutionEnvironmentsUnifiedJobTemplatesList lists unified job templates for an execution environment

Make a GET request to this resource to retrieve a list of
unified job templates associated with the selected
execution environment.

The resulting data structure contains:

	{
	    "count": 99,
	    "next": null,
	    "previous": null,
	    "results": [
	        ...
	    ]
	}

The `count` field indicates the total number of unified job templates
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more unified job template records.

## Results

Each unified job template data structure includes the following fields:

* `id`: Database ID for this unified job template. (integer)
* `type`: Data type for this unified job template. (choice)
* `url`: URL for this unified job template. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this unified job template was created. (datetime)
* `modified`: Timestamp when this unified job template was last modified. (datetime)
* `name`: Name of this unified job template. (string)
* `description`: Optional description of this unified job template. (string)
* `last_job_run`:  (datetime)
* `last_job_failed`:  (boolean)
* `next_job_run`:  (datetime)
* `status`:  (choice)
  - `new`: New
  - `pending`: Pending
  - `waiting`: Waiting
  - `running`: Running
  - `successful`: Successful
  - `failed`: Failed
  - `error`: Error
  - `canceled`: Canceled
  - `never updated`: Never Updated
  - `ok`: OK
  - `missing`: Missing
  - `none`: No External Source
  - `updating`: Updating

* `execution_environment`: The container image to be used for execution. (id)

## Sorting

To specify that unified job templates are returned in a particular
order, use the `order_by` query string parameter on the GET request.

	?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

	?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

	?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

	?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

	?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

	?related__search=findme
*/
func (a *Client) ExecutionEnvironmentsExecutionEnvironmentsUnifiedJobTemplatesList(params *ExecutionEnvironmentsExecutionEnvironmentsUnifiedJobTemplatesListParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsUnifiedJobTemplatesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutionEnvironmentsExecutionEnvironmentsUnifiedJobTemplatesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Execution Environments_execution_environments_unified_job_templates_list",
		Method:             "GET",
		PathPattern:        "/api/v2/execution_environments/{id}/unified_job_templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecutionEnvironmentsExecutionEnvironmentsUnifiedJobTemplatesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecutionEnvironmentsExecutionEnvironmentsUnifiedJobTemplatesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Execution Environments_execution_environments_unified_job_templates_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ExecutionEnvironmentsExecutionEnvironmentsUpdate updates an execution environment

Make a PUT or PATCH request to this resource to update this
execution environment.  The following fields may be modified:

* `name`: Name of this execution environment. (string, required)
* `description`: Optional description of this execution environment. (string, default=`""`)
* `organization`: The organization used to determine access to this execution environment. (id, default=“)
* `image`: The full image location, including the container registry, image name, and version tag. (string, required)

* `credential`:  (id, default=“)
* `pull`: Pull image before running? (choice)
  - `""`: --------- (default)
  - `always`: Always pull container before running.
  - `missing`: Only pull the image if not present before running.
  - `never`: Never pull container before running.

For a PUT request, include **all** fields in the request.
*/
func (a *Client) ExecutionEnvironmentsExecutionEnvironmentsUpdate(params *ExecutionEnvironmentsExecutionEnvironmentsUpdateParams, opts ...ClientOption) (*ExecutionEnvironmentsExecutionEnvironmentsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutionEnvironmentsExecutionEnvironmentsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Execution Environments_execution_environments_update",
		Method:             "PUT",
		PathPattern:        "/api/v2/execution_environments/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecutionEnvironmentsExecutionEnvironmentsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecutionEnvironmentsExecutionEnvironmentsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Execution Environments_execution_environments_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
